1. Overview
We need a Python script that:

Queries merge (pull) and issue data from a MySQL database.

Builds quarter-based windows for a given range of fiscal years.

Applies a “scaling factor” (for merges and issues) computed from a user-defined time window.

Displays two tables:

Table A: Per-quarter data for each repo (including scaled merges/issues).
Table B: A comparison of the average raw merges/issues/velocity among non-scaling repos vs. the scaling repo.

Everything is center-aligned in the final console output.

2. Inputs
Command-Line Arguments

--scaling-repo (string): The name of the repo used as the reference for scaling.
--start-fy (integer): The earliest fiscal year boundary to consider.
--end-fy (integer): The latest fiscal year boundary to consider.
--global-offset (integer, default=0): A global day offset to shift each repo’s oldest date.
--scaling-window (integer, default=120): Number of days to sum merges/issues from each repo’s oldest date in order to compute the scaling factors.
Database Connection

Reads configuration from a local db_config.ini file (or similarly).
Connects to MySQL, queries the pulls and issues tables.
Repository List

A predefined list of repos in the script (or loaded from config).
3. Functional Requirements
3.1 Quarter-Based Windows
Fiscal Year Quarters:

Q1: 10/01 of (FY-1) to 12/31 of (FY-1)
Q2: 01/01 of FY to 03/31 of FY
Q3: 04/01 of FY to 06/30 of FY
Q4: 07/01 of FY to 09/30 of FY
User Range:

Start from --start-fy and go up to --end-fy.
For each FY in that range, build Q1..Q4 as above.
The “scaling repo” might skip a partial quarter if the --global-offset date lands inside a quarter.
3.2 Scaling Factor Calculation
Window: For each repo, define [oldestDate + offset, oldestDate + offset + scaling_window days].
Sum merges (M_sum) and issues (I_sum) in that range. Partial if the repo’s data ends earlier.
Compute scaling factor for merges: \text{scaleFactorM}(r) = \frac{\text{scalingRepo M_sum}}{\text{repo M_sum}} Similarly for issues.
Handle zero/infinite cases:
If the scaling repo’s sum > 0 but the other repo’s sum = 0 => merges or issues cannot scale (factor = 0 or we label “cannot scale”).
If both sums = 0 => factor=1.0.
3.3 Main Table (Table A)
Columns (12 total):

QIdx: Quarter index (1..N)
QuarterLabel: e.g. “Q1 FY2025” (single-line, no newline chars)
Repo(Partial?): The repo name, plus “(partial)” if the 120-day window or the quarter logic determined partial data.
StartDate: The actual date for that quarter window’s start (or “SKIPPED” if partial at the start).
EndDate: Similarly for the quarter’s end.
M-raw: The raw merges in that quarter.
M: The scaled merges (raw merges * merges factor).
M-fact: The merges factor (3 decimals, or “N/A”).
I-raw: The raw issues in that quarter.
I: The scaled issues (raw issues * issues factor).
I-fact: The issues factor (3 decimals, or “N/A”).
V: A velocity measure: 0.4 * M + 0.6 * I if both are numeric, else “N/A.”
Display:

All columns center-aligned.
The script prints the scaling repo’s rows first (Q1..N), then each other repo in turn.
If partial or cannot scale, reflect that in the columns (e.g. “cannot scale”, “N/A” factor, etc.).
3.4 Comparison Table (Table B)
Columns (11 total):

QIdx
QuarterLabel
M-target: The average of M-raw among all non-scaling repos for that quarter.
M-scaling: M-raw for the scaling repo.
M% target: 
𝑀
scaling
𝑀
target
×
100
%
M 
target
​
 
M 
scaling
​
 
​
 ×100%, or “N/A” if target=0 or missing.
I-target: Average of I-raw among non-scaling.
I-scaling: I-raw for scaling.
I% target
V-target: Average velocity of non-scaling, using raw merges/issues => 0.4*M-raw + 0.6*I-raw.
V-scaling: The scaling repo’s velocity from raw merges/issues.
V% target
Display:

All columns center-aligned.
For each quarter, gather non-scaling repos’ raw merges/issues, compute average merges/issues, derive velocity.
Compare to scaling’s raw merges/issues/velocity.
Show ratio as a percentage of target.
4. Data Flow
Parse command-line arguments.
Connect to MySQL using db_config.ini.
Compute scale factors using --scaling-window.
Enumerate the relevant quarters (from --start-fy to --end-fy).
Build each repo’s quarter windows (offset by --global-offset).
Query merges/issues for each quarter window.
Calculate scaled merges/issues via the factor.
Print the main table.
Compute average raw merges/issues for non-scaling repos per quarter, compare with scaling’s raw merges/issues => produce the second table.
Center-align columns, handle partial or zero-data scenarios.
5. Technical Constraints
Python 3.6+ (or 3.8+, etc.)
mysql-connector-python for DB queries.
matplotlib and numpy are optional but used in the environment, though primarily we do console output.
Must handle tens of thousands of rows efficiently (small-scale). No advanced optimization needed for millions of rows.
6. Edge Cases
Repo with No Data: Show “cannot scale” if no merges/issues.
Partial if the last date is before oldest_date + window_days.
Zero merges/issues => factor might be 0 or can’t scale.
No non-scaling repos => second table’s averages = 0 => ratio => “N/A.”
start-fy > end-fy => possibly no quarters => gracefully handle.
7. Output Format
Console printing with each column separated by " | ".
Column headers are centered.
Data cells also center-aligned.
Clear labeling of partial or cannot scale conditions.
8. Deliverables
Python Script collaborative_velocity.py implementing all above logic.
Instructions or a short README describing how to run:
wasm
Copy
python collaborative_velocity.py \
  --scaling-repo <repo> \
  --start-fy <start> \
  --end-fy <end> \
  --global-offset <days> \
  --scaling-window <days>
Sample db_config.ini for MySQL.
Test or sample output verifying the two tables match the specification.
9. Acceptance Criteria
When run with valid arguments, the script successfully:
Connects to the DB,
Computes scale factors from the chosen window,
Prints two tables (main and comparison), both center-aligned.
Reflects partial/cannot-scale logic clearly.
The second table shows each quarter’s non-scaling average vs. scaling’s raw merges/issues/velocity, plus a % ratio.
Exiting gracefully if no data or no quarters.
This requirements list should be enough for a development team to implement the quarter-based velocity analysis script, with the scaling logic, two tables, and center-aligned console output.